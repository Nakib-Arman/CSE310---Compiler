.MODEL SMALL
.STACK 100H

.DATA
	number DB "00000$"
.CODE
f PROC
	PUSH BP
	MOV BP, SP
	SUB SP, 2
	MOV AX, 5
	MOV [BP-2], AX
L2:
	MOV AX, [BP-2]
	MOV DX, AX
	MOV AX, 0
	CMP DX, AX
	JG L3
	JMP L4
L3:
	MOV AX, 1
	JMP L5
L4:
	MOV AX, 0
L5:
	CMP AX, 0
	JNE L6
	JMP L7
L6:
L8:
	MOV AX, [BP+4]
	PUSH AX
	INC AX
	MOV [BP+4], AX
	POP AX
L9:
	MOV AX, [BP-2]
	PUSH AX
	DEC AX
	MOV [BP-2], AX
	POP AX
	JMP L2
L7:

	MOV AX, 3
	PUSH AX
L10:
	MOV AX, [BP+4]
	POP CX
	CWD
	MUL CX
	PUSH AX
	MOV AX, 7
	MOV BX, AX
	POP AX
	SUB AX, BX
	JMP L1	; Line 8
	MOV AX, 9
	MOV [BP+4], AX
L1:
	ADD SP, 2
	POP BP
	RET 2
f ENDP
g PROC
	PUSH BP
	MOV BP, SP
	SUB SP, 2
	SUB SP, 2	; Line 14
L12:
	MOV AX, [BP+6]
	PUSH AX
	CALL f
	PUSH AX
L13:
	MOV AX, [BP+6]
	POP BX
	ADD AX,BX
	PUSH AX
L14:
	MOV AX, [BP+4]
	POP BX
	ADD AX,BX
	MOV [BP-2], AX
	MOV AX, [BP-2]
	CALL print_output
	CALL new_line     ; Line 16
	MOV AX, 0
	MOV [BP-4], AX
L15:
	MOV AX, [BP-4]
	MOV DX, AX
	MOV AX, 7
	CMP DX, AX
	JL L16
	JMP L17
L16:
	MOV AX, 1
	JMP L18
L17:
	MOV AX, 0
L18:
	CMP AX, 0
	JNE L19
	JMP L21
L20:
L22:
	MOV AX, [BP-4]
	PUSH AX
	INC AX
	MOV [BP-4], AX
	POP AX
	JMP L15
L19:
L23:
	MOV AX, [BP-4]
	MOV CX, 3
	CWD
	DIV CX
	MOV AX,DX
	MOV DX, AX
	MOV AX, 0
	CMP DX, AX
	JE L24
	JMP L25
L24:
	MOV AX, 1
	JMP L26
L25:
	MOV AX, 0
L26:
	CMP AX, 0
	JNE L27
	JMP L28
L27:
L30:
	MOV AX, [BP-2]
	PUSH AX
	MOV AX, 5
	POP BX
	ADD AX,BX
	MOV [BP-2], AX
	JMP L29
L28:
L31:
	MOV AX, [BP-2]
	PUSH AX
	MOV AX, 1
	MOV BX, AX
	POP AX
	SUB AX, BX
	MOV [BP-2], AX
L29:
	JMP L20
L21:

L32:
	MOV AX, [BP-2]
	JMP L11	; Line 27
L11:
	ADD SP, 4
	POP BP
	RET 4
g ENDP
main PROC
	MOV AX, @DATA
	MOV DS, AX
	PUSH BP
	MOV BP, SP
	SUB SP, 2
	SUB SP, 2	; Line 31
	SUB SP, 2	; Line 31
	MOV AX, 1
	MOV [BP-2], AX
	MOV AX, 2
	MOV [BP-4], AX
L34:
	MOV AX, [BP-2]
	PUSH AX
L35:
	MOV AX, [BP-4]
	PUSH AX
	CALL g
	MOV [BP-2], AX
	MOV AX, [BP-2]
	CALL print_output
	CALL new_line     ; Line 35
	MOV AX, 0
	MOV [BP-6], AX
L36:
	MOV AX, [BP-6]
	MOV DX, AX
	MOV AX, 4
	CMP DX, AX
	JL L37
	JMP L38
L37:
	MOV AX, 1
	JMP L39
L38:
	MOV AX, 0
L39:
	CMP AX, 0
	JNE L40
	JMP L42
L41:
L43:
	MOV AX, [BP-6]
	PUSH AX
	INC AX
	MOV [BP-6], AX
	POP AX
	JMP L36
L40:
	MOV AX, 3
	MOV [BP-2], AX
L44:
	MOV AX, [BP-2]
	MOV DX, AX
	MOV AX, 0
	CMP DX, AX
	JG L45
	JMP L46
L45:
	MOV AX, 1
	JMP L47
L46:
	MOV AX, 0
L47:
	CMP AX, 0
	JNE L48
	JMP L49
L48:
L50:
	MOV AX, [BP-4]
	PUSH AX
	INC AX
	MOV [BP-4], AX
	POP AX
L51:
	MOV AX, [BP-2]
	PUSH AX
	DEC AX
	MOV [BP-2], AX
	POP AX
	JMP L44
L49:
	JMP L41
L42:
	MOV AX, [BP-2]
	CALL print_output
	CALL new_line     ; Line 43
	MOV AX, [BP-4]
	CALL print_output
	CALL new_line     ; Line 44
	MOV AX, [BP-6]
	CALL print_output
	CALL new_line     ; Line 45

	MOV AX, 0
	JMP L33	; Line 46
L33:
	ADD SP, 6
	POP BP
	MOV AX, 4CH
	INT 21H
main ENDP
new_line proc
    push ax
    push dx
    mov ah,2
    mov dl,0Dh
    int 21h
    mov ah,2
    mov dl,0Ah
    int 21h
    pop dx
    pop ax
    ret
    new_line endp
print_output proc  ;print what is in ax
    push ax
    push bx
    push cx
    push dx
    push si
    lea si,number
    mov bx,10
    add si,4
    cmp ax,0
    jnge negate
    print:
    xor dx,dx
    div bx
    mov [si],dl
    add [si],'0'
    dec si
    cmp ax,0
    jne print
    inc si
    lea dx,si
    mov ah,9
    int 21h
    pop si
    pop dx
    pop cx
    pop bx
    pop ax
    ret
    negate:
    push ax
    mov ah,2
    mov dl,'-'
    int 21h
    pop ax
    neg ax
    jmp print
    print_output endp
END main
