Line 1: type_specifier : INT

int

Line 1: declaration_list : ID

x

Line 1: declaration_list : declaration_list COMMA ID

x,y

Line 1: declaration_list : declaration_list COMMA ID

x,y,z

Line 1: var_declaration : type_specifier declaration_list SEMICOLON

int x,y,z;

Line 1: unit : var_declaration

int x,y,z;

Line 1: program : unit

int x,y,z;

Line 1: type_specifier : FLOAT

float

Line 1: declaration_list : ID

a

Line 1: var_declaration : type_specifier declaration_list SEMICOLON

float a;

Line 1: unit : var_declaration

float a;

Line 1: program : program unit

int x,y,z;
float a;


Line 1: program : program unit

int x,y,z;
float a;



Line 3: program : program unit

int x,y,z;
float a;



Line 3: type_specifier : INT

int

Line 3: parameter_list : type_specifier

int

Line 4: compound_statement : LCURL RCURL

{}

ScopeTable # 1.1
ScopeTable # 1
 0 --> < x : ID > 
 1 --> < y : ID > 
 2 --> < z : ID > 
 5 --> < var : ID > 
 7 --> < a : ID > 

Line 4: func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement

 var(int{}

Line 4: unit : func_definition

 var(int{}

Line 4: program : program unit

int x,y,z;
float a;


 var(int{}

Line 7: type_specifier : INT

int

Line 8: type_specifier : INT

int

Line 8: declaration_list : ID

x

Line 8: var_declaration : type_specifier declaration_list SEMICOLON

int x;

Line 8: statement : var_declaration

int x;

Line 8: statements : statement

int x;

Line 8: variable : ID

y

Line 8: factor : variable

y

Line 8: unary_expression : factor

y

Line 8: unary_expression : ADDOP unary_expression

-y

Line 8: term : unary_expression

-y

Line 8: simple_expression : term

-y

Line 8: rel_expression : simple_expression

-y

Line 8: logic_expression : rel_expression

-y

Line 8: expression : logic_expression

-y

Line 8: statement : expression_statement



Line 8: statements : statements statement

int x;


Line 8: variable : ID

z

Line 8: factor : variable

z

Line 8: unary_expression : factor

z

Line 8: term : unary_expression

z

Line 8: simple_expression : term

z

Line 8: rel_expression : simple_expression

z

Line 8: logic_expression : rel_expression

z

Line 8: expression : logic_expression

z

Line 8: expression_statement : expression SEMICOLON

z;

Line 8: statement : expression_statement

z;

Line 8: statements : statements statement

int x;

z;

Line 9: variable : ID

a

Line 9: expression : variable ASSIGNOP logic_expression

a=

Line 9: expression_statement : expression SEMICOLON

a=<missing ';'>

Line 9: statement : expression_statement

a=<missing ';'>

Line 9: statements : statements statement

int x;

z;
a=<missing ';'>

Line 9: expression : logic_expression



Line 9: expression_statement : expression SEMICOLON

<missing ';'>

Line 9: statement : expression_statement

<missing ';'>

Line 9: statements : statements statement

int x;

z;
a=<missing ';'>
<missing ';'>

Line 9: expression : logic_expression



Line 9: expression_statement : expression SEMICOLON

<missing ';'>

Line 9: statement : expression_statement

<missing ';'>

Line 9: statements : statements statement

int x;

z;
a=<missing ';'>
<missing ';'>
<missing ';'>

Line 9: factor : CONST_INT

6

Line 9: unary_expression : factor

6

Line 9: term : unary_expression

6

Line 9: simple_expression : term

6

Line 9: rel_expression : simple_expression

6

Line 9: logic_expression : rel_expression

6

Line 9: expression : logic_expression

6

Line 11: expression_statement : expression SEMICOLON

6<missing ';'>

Line 9: statement : expression_statement

6<missing ';'>

Line 9: statements : statements statement

int x;

z;
a=<missing ';'>
<missing ';'>
<missing ';'>
6<missing ';'>

Line 11: variable : ID

x

Line 11: factor : CONST_INT

2

Line 11: unary_expression : factor

2

Line 11: term : unary_expression

2

Line 11: simple_expression : term

2

Line 11: rel_expression : simple_expression

2

Line 11: logic_expression : rel_expression

2

Line 11: expression : variable ASSIGNOP logic_expression

x=2

Line 11: expression_statement : expression SEMICOLON

x=2;

Line 11: statement : expression_statement

x=2;

Line 11: statements : statements statement

int x;

z;
a=<missing ';'>
<missing ';'>
<missing ';'>
6<missing ';'>
x=2;

Line 14: factor : CONST_INT

0

Line 14: unary_expression : factor

0

Line 14: term : unary_expression

0

Line 14: simple_expression : term

0

Line 14: rel_expression : simple_expression

0

Line 14: logic_expression : rel_expression

0

Line 14: expression : logic_expression

0

Line 14: statement : RETURN expression SEMICOLON

return 0;

Line 14: statements : statements statement

int x;

z;
a=<missing ';'>
<missing ';'>
<missing ';'>
6<missing ';'>
x=2;
return 0;

Line 15: compound_statement : LCURL statements RCURL

{
int x;

z;
a=<missing ';'>
<missing ';'>
<missing ';'>
6<missing ';'>
x=2;
return 0;
}

ScopeTable # 1.2
 0 --> < x : ID > 
ScopeTable # 1
 0 --> < x : ID > 
 1 --> < y : ID > 
 2 --> < z : ID > 
 5 --> < var : ID > 
 7 --> < a : ID > 
 13 --> < main : ID > 

Line 15: func_definition : type_specifier ID LPAREN RPAREN compound_statement

int main(){
int x;

z;
a=<missing ';'>
<missing ';'>
<missing ';'>
6<missing ';'>
x=2;
return 0;
}

Line 15: unit : func_definition

int main(){
int x;

z;
a=<missing ';'>
<missing ';'>
<missing ';'>
6<missing ';'>
x=2;
return 0;
}

Line 15: program : program unit

int x,y,z;
float a;


 var(int{}
int main(){
int x;

z;
a=<missing ';'>
<missing ';'>
<missing ';'>
6<missing ';'>
x=2;
return 0;
}

Line 15: start : program

ScopeTable # 1
 0 --> < x : ID > 
 1 --> < y : ID > 
 2 --> < z : ID > 
 5 --> < var : ID > 
 7 --> < a : ID > 
 13 --> < main : ID > 

Total number of lines: 15
Total number of errors: 0
